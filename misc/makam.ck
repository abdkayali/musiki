
StifKarp inst => dac;

Std.atof(me.arg(0)) => float base;
Std.atoi(me.arg(1)) => int duration;
Math.pow(2, 1/53.0) => float koma;

[1.0, 1.05349794238683, 1.06787109375, 1.10985791461329, 1.125, 1.18518518518519,
1.20135498046875, 1.24859015393995, 1.265625, 1.33333333333333,
1.35152435302734, 1.40466392318244, 1.423828125, 1.47981055281772, 1.5,
1.58024691358025, 1.601806640625, 1.66478687191993, 1.6875, 1.77777777777778,
1.80203247070313, 1.87288523090992, 1.8984375, 1.97308073709029, 2.0,
2.10699588477366, 2.1357421875, 2.21971582922657, 2.25, 2.37037037037037,
2.4027099609375, 2.4971803078799, 2.53125, 2.66666666666667, 2.70304870605469,
2.80932784636488, 2.84765625, 2.95962110563543, 3, 3.16049382716049,
3.20361328125, 3.32957374383986, 3.375, 3.55555555555556, 3.60406494140625,
3.74577046181984, 3.796875, 3.94616147418058, 4.0] @=> float dizi[];

[14,18,21,24,28,32,35,38] @=> int rast[];
[18,21,24,28,32,35,38,42] @=> int ussak[];

for (2=>int a; a < me.args(); a++) {
  Std.atoi(me.arg(a)) => int i;
	( base *  dizi[i] ) =>  inst.freq;
	inst.noteOn( 1 );
	duration::ms => now;
}
